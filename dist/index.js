/*! For license information please see index.js.LICENSE.txt */
!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.JToasted=e():t.JToasted=e()}(self,(()=>(()=>{"use strict";var t={"./node_modules/css-loader/dist/cjs.js!./src/style.css":(t,e,s)=>{s.r(e),s.d(e,{default:()=>o});var n=s("./node_modules/css-loader/dist/runtime/sourceMaps.js"),r=s.n(n),i=s("./node_modules/css-loader/dist/runtime/api.js"),a=s.n(i)()(r());a.push([t.id,"/*style.css*/ \r\n.jtoasteds-container {\r\n    --jtoasted-exit-btn-size: 25px;\r\n    --half-jtoasted-exit-btn-size: calc(var(--jtoasted-exit-btn-size) / 2);\r\n    position: fixed;\r\n    right: var(--half-jtoasted-exit-btn-size);\r\n    bottom: 10px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 5px;\r\n}\r\n\r\n.jtoasted {\r\n    position: relative;\r\n    background-color: azure;\r\n    border: 1px slategray solid;\r\n    border-radius: 5px;\r\n    padding: 5px;\r\n    min-width: 100px;\r\n    min-height: 1.5em;\r\n    max-width: 25vw;\r\n    width: fit-content;\r\n    margin-left: auto;\r\n    margin-right: 0%;\r\n    \r\n    user-select: none;\r\n    -webkit-user-select: none;\r\n}\r\n.jtoasted .jtoasted-exit-btn {\r\n    position: absolute;\r\n    text-align: center;\r\n    top: calc(var(--half-jtoasted-exit-btn-size) * -0.5);\r\n    right: calc(var(--half-jtoasted-exit-btn-size) * -0.5);\r\n    width: var(--jtoasted-exit-btn-size);\r\n    height: var(--jtoasted-exit-btn-size);\r\n    background-color: rgba(175, 255, 243, 0.1);\r\n    border: none;\r\n    cursor: pointer;\r\n    color: red;\r\n}\r\n.jtoasted .jtoasted-data * {\r\n    margin: 0%;\r\n}\r\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA,YAAY;AACZ;IACI,8BAA8B;IAC9B,sEAAsE;IACtE,eAAe;IACf,yCAAyC;IACzC,YAAY;IACZ,aAAa;IACb,sBAAsB;IACtB,QAAQ;AACZ;;AAEA;IACI,kBAAkB;IAClB,uBAAuB;IACvB,2BAA2B;IAC3B,kBAAkB;IAClB,YAAY;IACZ,gBAAgB;IAChB,iBAAiB;IACjB,eAAe;IACf,kBAAkB;IAClB,iBAAiB;IACjB,gBAAgB;;IAEhB,iBAAiB;IACjB,yBAAyB;AAC7B;AACA;IACI,kBAAkB;IAClB,kBAAkB;IAClB,oDAAoD;IACpD,sDAAsD;IACtD,oCAAoC;IACpC,qCAAqC;IACrC,0CAA0C;IAC1C,YAAY;IACZ,eAAe;IACf,UAAU;AACd;AACA;IACI,UAAU;AACd",sourcesContent:["/*style.css*/ \r\n.jtoasteds-container {\r\n    --jtoasted-exit-btn-size: 25px;\r\n    --half-jtoasted-exit-btn-size: calc(var(--jtoasted-exit-btn-size) / 2);\r\n    position: fixed;\r\n    right: var(--half-jtoasted-exit-btn-size);\r\n    bottom: 10px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 5px;\r\n}\r\n\r\n.jtoasted {\r\n    position: relative;\r\n    background-color: azure;\r\n    border: 1px slategray solid;\r\n    border-radius: 5px;\r\n    padding: 5px;\r\n    min-width: 100px;\r\n    min-height: 1.5em;\r\n    max-width: 25vw;\r\n    width: fit-content;\r\n    margin-left: auto;\r\n    margin-right: 0%;\r\n    \r\n    user-select: none;\r\n    -webkit-user-select: none;\r\n}\r\n.jtoasted .jtoasted-exit-btn {\r\n    position: absolute;\r\n    text-align: center;\r\n    top: calc(var(--half-jtoasted-exit-btn-size) * -0.5);\r\n    right: calc(var(--half-jtoasted-exit-btn-size) * -0.5);\r\n    width: var(--jtoasted-exit-btn-size);\r\n    height: var(--jtoasted-exit-btn-size);\r\n    background-color: rgba(175, 255, 243, 0.1);\r\n    border: none;\r\n    cursor: pointer;\r\n    color: red;\r\n}\r\n.jtoasted .jtoasted-data * {\r\n    margin: 0%;\r\n}\r\n"],sourceRoot:""}]);const o=a},"./node_modules/css-loader/dist/runtime/api.js":t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var s="",n=void 0!==e[5];return e[4]&&(s+="@supports (".concat(e[4],") {")),e[2]&&(s+="@media ".concat(e[2]," {")),n&&(s+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),s+=t(e),n&&(s+="}"),e[2]&&(s+="}"),e[4]&&(s+="}"),s})).join("")},e.i=function(t,s,n,r,i){"string"==typeof t&&(t=[[null,t,void 0]]);var a={};if(n)for(var o=0;o<this.length;o++){var d=this[o][0];null!=d&&(a[d]=!0)}for(var l=0;l<t.length;l++){var c=[].concat(t[l]);n&&a[c[0]]||(void 0!==i&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=i),s&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=s):c[2]=s),r&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=r):c[4]="".concat(r)),e.push(c))}},e}},"./node_modules/css-loader/dist/runtime/sourceMaps.js":t=>{t.exports=function(t){var e=t[1],s=t[3];if(!s)return e;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(s)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),i="/*# ".concat(r," */"),a=s.sources.map((function(t){return"/*# sourceURL=".concat(s.sourceRoot||"").concat(t," */")}));return[e].concat(a).concat([i]).join("\n")}return[e].join("\n")}},"./src/style.css":(t,e,s)=>{s.r(e),s.d(e,{default:()=>m});var n=s("./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js"),r=s.n(n),i=s("./node_modules/style-loader/dist/runtime/styleDomAPI.js"),a=s.n(i),o=s("./node_modules/style-loader/dist/runtime/insertBySelector.js"),d=s.n(o),l=s("./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js"),c=s.n(l),u=s("./node_modules/style-loader/dist/runtime/insertStyleElement.js"),p=s.n(u),_=s("./node_modules/style-loader/dist/runtime/styleTagTransform.js"),h=s.n(_),A=s("./node_modules/css-loader/dist/cjs.js!./src/style.css"),f={};f.styleTagTransform=h(),f.setAttributes=c(),f.insert=d().bind(null,"head"),f.domAPI=a(),f.insertStyleElement=p(),r()(A.default,f);const m=A.default&&A.default.locals?A.default.locals:void 0},"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":t=>{var e=[];function s(t){for(var s=-1,n=0;n<e.length;n++)if(e[n].identifier===t){s=n;break}return s}function n(t,n){for(var i={},a=[],o=0;o<t.length;o++){var d=t[o],l=n.base?d[0]+n.base:d[0],c=i[l]||0,u="".concat(l," ").concat(c);i[l]=c+1;var p=s(u),_={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==p)e[p].references++,e[p].updater(_);else{var h=r(_,n);n.byIndex=o,e.splice(o,0,{identifier:u,updater:h,references:1})}a.push(u)}return a}function r(t,e){var s=e.domAPI(e);return s.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;s.update(t=e)}else s.remove()}}t.exports=function(t,r){var i=n(t=t||[],r=r||{});return function(t){t=t||[];for(var a=0;a<i.length;a++){var o=s(i[a]);e[o].references--}for(var d=n(t,r),l=0;l<i.length;l++){var c=s(i[l]);0===e[c].references&&(e[c].updater(),e.splice(c,1))}i=d}}},"./node_modules/style-loader/dist/runtime/insertBySelector.js":t=>{var e={};t.exports=function(t,s){var n=function(t){if(void 0===e[t]){var s=document.querySelector(t);if(window.HTMLIFrameElement&&s instanceof window.HTMLIFrameElement)try{s=s.contentDocument.head}catch(t){s=null}e[t]=s}return e[t]}(t);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(s)}},"./node_modules/style-loader/dist/runtime/insertStyleElement.js":t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},"./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":(t,e,s)=>{t.exports=function(t){var e=s.nc;e&&t.setAttribute("nonce",e)}},"./node_modules/style-loader/dist/runtime/styleDomAPI.js":t=>{t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(s){!function(t,e,s){var n="";s.supports&&(n+="@supports (".concat(s.supports,") {")),s.media&&(n+="@media ".concat(s.media," {"));var r=void 0!==s.layer;r&&(n+="@layer".concat(s.layer.length>0?" ".concat(s.layer):""," {")),n+=s.css,r&&(n+="}"),s.media&&(n+="}"),s.supports&&(n+="}");var i=s.sourceMap;i&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(n,t,e.options)}(e,t,s)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},"./node_modules/style-loader/dist/runtime/styleTagTransform.js":t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}},"./src/jtoasty.ts":(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.ValueUpdatedEvent=e.JToastyMetadataSetEvent=e.JToastySimpleEvent=e.JToastyEvent=e.JToastyProgess=e.JToasty=void 0;class s extends EventTarget{constructor(t,e,...s){super(),this.meta_data=new Map,this._create_base_html(t),this.set_texts(s),t.appendChild(this.base_div),this.set_lifetime(e)}_create_base_html(t){this._create_base_div(t),this._create_exit_button(),this._create_text_div()}_create_base_div(t){const e=document.createElement("div");e.classList.add("jtoasted"),this.base_div=e,t.appendChild(e)}_create_text_div(){const t=document.createElement("div");t.classList.add("jtoasted-data"),this.base_div.appendChild(t),this.text_div=t}_create_exit_button(){const t=document.createElement("button");t.classList.add("jtoasted-exit-btn");const e=this.base_div;t.addEventListener("click",(()=>{const t=new CustomEvent("user-remove",{cancelable:!0,detail:{toasty:this}});this.dispatchEvent(t)&&e.remove()})),t.innerHTML="&cross;",e.appendChild(t),this.exit_btn=t}_create_data_line_p(t){const e=document.createElement("p");e.classList.add("jtoasted-data"),e.textContent=t,this.text_div.appendChild(e)}set_lifetime(t){null!=this.life_timeout_id&&(clearTimeout(this.life_timeout_id),this.life_timeout_id=null),this.life=t,-1!=t&&(this.life_timeout_id=setTimeout((()=>{this.life_timeout_id=null,this.remove()}),1e3*this.life))}remove(){var t;return!!this.alive&&(this.fireEvent("removing",{cancelable:!0})?(this.set_lifetime(this.life),!1):(null===(t=this.base_div)||void 0===t||t.remove(),this.base_div=null,!0))}get alive(){return null!=this.base_div&&null!=this.base_div.parentElement}set_texts(t){if(this.lines){const e=this.text_div.children,s=Math.min(t.length,e.length);for(let n=0;n<s;n++)e[n].textContent=t[n];if(e.length>s)for(let t=s;t<e.length;t++)e[t].remove();else if(t.length>s)for(let e=s;e<t.length;e++){const s=t[e];this._create_data_line_p(s)}}else for(let e=0;e<t.length;e++){const s=t[e];this._create_data_line_p(s)}this.lines=t.slice()}set_text_at(t,e){if(t<0||t>this.lines.length)return!1;if(t==this.lines.length)return this._create_data_line_p(e),!0;const s=this.text_div.children;return this.lines[t]=e,s[t].textContent=e,!0}get_texts(){return this.lines.slice()}has_metadata(t){return this.meta_data.has(t)}set_metadata(t,e){const s=this.meta_data.get(t);this.meta_data.set(t,e);const n=new a(t,e,s);this.dispatchEvent(n)}get_metadata(t){return this.meta_data.get(t)}on(t,e,s){const n=s||{};this.addEventListener(t,e,n)}once(t,e,s){const n=s?Object.assign({},s,{once:!0}):{once:!0};this.addEventListener(t,e,n)}off(t,e,s){this.removeEventListener(t,e,s)}fireEvent(t,e){const s=e?new CustomEvent(t,e):new CustomEvent(t);return!this.dispatchEvent(s)}}e.JToasty=s;class n extends s{constructor(t,e){const{progress:s,finishat:r,apercent:i,lifetime:a,prefixing:o}=e;"string"==typeof o?super(t,-1,o,""):super(t,-1),this.on("metadata-set",n.PROGRESS_METADATA_LISTENER),this.meta_data.set(n.PROGRESS_METADATA_PROGRESS_KEY,s),this.meta_data.set(n.PROGRESS_METADATA_FINISH_AT_KEY,r),this.set_metadata(n.PROGRESS_METADATA_PERCENT_KEY,i),this._on_completed_callback=()=>{this.set_lifetime(a)},this.once("completed",this._on_completed_callback)}get is_complete(){return this.get_progress()>=this.finish_at()}set_lifetime(t){this.is_complete&&super.set_lifetime(t)}set_progress(t){this.set_metadata(n.PROGRESS_METADATA_PREFIX+"progress",t)}get_progress(){return this.get_metadata(n.PROGRESS_METADATA_PREFIX+"progress")}finish_at(t){const e=n.PROGRESS_METADATA_PREFIX+"finish_at";if("number"!=typeof t)return this.get_metadata(e);this.set_metadata(e,t)}use_percentage(t){if("boolean"!=typeof t)return this.get_metadata(n.PROGRESS_METADATA_PERCENT_KEY);this.set_metadata(n.PROGRESS_METADATA_PERCENT_KEY,t)}on(t,e,s){super.on(t,e,s)}once(t,e,s){super.once(t,e,s)}static get PROGRESS_METADATA_PREFIX(){return"PROGRESS."}static get PROGRESS_METADATA_LISTENER(){const t=n.PROGRESS_METADATA_PREFIX;return e=>{const s=e.detail;if(!e.detail.key.startsWith(n.PROGRESS_METADATA_PREFIX))return;const r=e.target,i=r.get_texts();let a=i.length-1;0==i.length&&(i.length=1,a=0);const d=r.get_metadata(t+"progress"),l=r.get_metadata(t+"finish_at"),c=d>=l?"Completed - ":"Processing - ",u=r.get_metadata(t+"as_percent")?`${(d/l*100).toFixed(2)}%`:`${d} / ${l}`;if(r.set_text_at(a,`${c}${u}`),s.key==n.PROGRESS_METADATA_PERCENT_KEY)return;const p=s.key.substring(n.PROGRESS_METADATA_PREFIX.length),_=new o(p,s.old_value,s.value);r.dispatchEvent(_),d>=l&&r.fireEvent("completed",{detail:{from:p,old_value:s.old_value,new_value:s.value}})}}static get PROGRESS_METADATA_PROGRESS_KEY(){return this.PROGRESS_METADATA_PREFIX+"progress"}static get PROGRESS_METADATA_FINISH_AT_KEY(){return this.PROGRESS_METADATA_PREFIX+"finish_at"}static get PROGRESS_METADATA_PERCENT_KEY(){return this.PROGRESS_METADATA_PREFIX+"as_percent"}}e.JToastyProgess=n;class r extends CustomEvent{constructor(t,e){super(t,e)}}e.JToastyEvent=r;class i extends r{constructor(t,e){super(t,{detail:e})}}e.JToastySimpleEvent=i;class a extends i{constructor(t,e,s){super("metadata-set",{key:t,value:e,old_value:s})}}e.JToastyMetadataSetEvent=a;class o extends i{constructor(t,e,s){super(t+"-updated",{old_value:e,new_value:s,property:t}),this.property=t,this.old_value=e,this.new_value=s}}e.ValueUpdatedEvent=o}},e={};function s(n){var r=e[n];if(void 0!==r)return r.exports;var i=e[n]={id:n,exports:{}};return t[n](i,i.exports,s),i.exports}s.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return s.d(e,{a:e}),e},s.d=(t,e)=>{for(var n in e)s.o(e,n)&&!s.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},s.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),s.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.nc=void 0;var n={};return(()=>{var t=n;Object.defineProperty(t,"__esModule",{value:!0}),t.JToastyToaster=void 0;const e=s("./src/jtoasty.ts");s("./src/style.css");class r extends EventTarget{constructor(t=document.body){if(super(),!(t instanceof HTMLElement))throw new TypeError("Passed parent must be an HTMLElement instance");this.parent=t,this.toasted_div=document.createElement("div"),this.toasted_div.classList.add("jtoasteds-container"),this.parent.appendChild(this.toasted_div)}createNotification(t,...s){let n=5;"string"==typeof t?s.unshift(t):Number.isSafeInteger(t)&&(n=t);const r=new e.JToasty(this.toasted_div,n,...s);return r.on("metadata-set",(t=>{this.dispatchEvent(new CustomEvent("jtoasty.metadata-set",{detail:{data:t.detail,toasty:r}}))})),r}notification(t,s,...n){return t instanceof e.JToasty?("number"==typeof s?(t.set_texts(n),t.set_lifetime(s)):"string"==typeof s&&n.unshift(s),t.set_texts(n),t):"number"==typeof t?("string"==typeof s&&n.unshift(s),this.createNotification(t,...n)):("string"==typeof t&&n.unshift(t),"string"==typeof s&&n.unshift(s),this.createNotification(...n))}progressNotification(t,s,n){if(t instanceof e.JToastyProgess){const e=s;if("string"==typeof n){const e=t.get_texts();1==e.length?e.unshift(n):e[0]=n,t.set_texts(e)}return"number"==typeof e.progress&&t.set_progress(e.progress),"number"==typeof e.finishat&&t.finish_at(e.finishat),"boolean"==typeof e.apercent&&t.use_percentage(e.apercent),t}const r=Object.assign({finishat:100,lifetime:5,progress:0,apercent:!1,prefixing:s},t);return new e.JToastyProgess(this.toasted_div,r)}}t.JToastyToaster=r})(),n})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,