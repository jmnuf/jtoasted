/*! For license information please see index.js.LICENSE.txt */
!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.JToasted=e():t.JToasted=e()}(self,(()=>(()=>{"use strict";var t={"./node_modules/css-loader/dist/cjs.js!./src/style.css":(t,e,s)=>{s.r(e),s.d(e,{default:()=>a});var n=s("./node_modules/css-loader/dist/runtime/sourceMaps.js"),r=s.n(n),i=s("./node_modules/css-loader/dist/runtime/api.js"),o=s.n(i)()(r());o.push([t.id,"/*style.css*/\r\n.jtoasteds-container {\r\n\t--jtoasted-exit-btn-size: 25px;\r\n\t--half-jtoasted-exit-btn-size: calc(var(--jtoasted-exit-btn-size) / 2);\r\n\tposition: fixed;\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n\tgap: 5px;\r\n}\r\n\r\n.jtoasteds-container.bottom-right {\r\n\tright: var(--half-jtoasted-exit-btn-size);\r\n\tbottom: 10px;\r\n}\r\n.jtoasteds-container.bottom-left {\r\n\tleft: var(--half-jtoasted-exit-btn-size);\r\n\tbottom: 10px;\r\n}\r\n.jtoasteds-container.top-right {\r\n\tright: var(--half-jtoasted-exit-btn-size);\r\n\ttop: 10px;\r\n}\r\n.jtoasteds-container.top-left {\r\n\tleft: var(--half-jtoasted-exit-btn-size);\r\n\ttop: 10px;\r\n}\r\n.jtoasteds-container.reversed {\r\n\tflex-direction: column-reverse;\r\n}\r\n\r\n.jtoasted {\r\n\tposition: relative;\r\n\tbackground-color: azure;\r\n\tborder: 1px slategray solid;\r\n\tborder-radius: 5px;\r\n\tpadding: 5px;\r\n\tmin-width: 100px;\r\n\tmin-height: 1.5em;\r\n\tmax-width: 25vw;\r\n\twidth: fit-content;\r\n\tmargin-left: auto;\r\n\tmargin-right: 0%;\r\n\r\n\tuser-select: none;\r\n\t-webkit-user-select: none;\r\n}\r\n.jtoasted .jtoasted-exit-btn {\r\n\tposition: absolute;\r\n\ttext-align: center;\r\n\ttop: calc(var(--half-jtoasted-exit-btn-size) * -0.5);\r\n\tright: calc(var(--half-jtoasted-exit-btn-size) * -0.5);\r\n\twidth: var(--jtoasted-exit-btn-size);\r\n\theight: var(--jtoasted-exit-btn-size);\r\n\tbackground-color: rgba(175, 255, 243, 0.1);\r\n\tborder: none;\r\n\tcursor: pointer;\r\n\tcolor: red;\r\n}\r\n.jtoasted .jtoasted-data * {\r\n\tmargin: 0%;\r\n}\r\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA,YAAY;AACZ;CACC,8BAA8B;CAC9B,sEAAsE;CACtE,eAAe;CACf,aAAa;CACb,sBAAsB;CACtB,QAAQ;AACT;;AAEA;CACC,yCAAyC;CACzC,YAAY;AACb;AACA;CACC,wCAAwC;CACxC,YAAY;AACb;AACA;CACC,yCAAyC;CACzC,SAAS;AACV;AACA;CACC,wCAAwC;CACxC,SAAS;AACV;AACA;CACC,8BAA8B;AAC/B;;AAEA;CACC,kBAAkB;CAClB,uBAAuB;CACvB,2BAA2B;CAC3B,kBAAkB;CAClB,YAAY;CACZ,gBAAgB;CAChB,iBAAiB;CACjB,eAAe;CACf,kBAAkB;CAClB,iBAAiB;CACjB,gBAAgB;;CAEhB,iBAAiB;CACjB,yBAAyB;AAC1B;AACA;CACC,kBAAkB;CAClB,kBAAkB;CAClB,oDAAoD;CACpD,sDAAsD;CACtD,oCAAoC;CACpC,qCAAqC;CACrC,0CAA0C;CAC1C,YAAY;CACZ,eAAe;CACf,UAAU;AACX;AACA;CACC,UAAU;AACX",sourcesContent:["/*style.css*/\r\n.jtoasteds-container {\r\n\t--jtoasted-exit-btn-size: 25px;\r\n\t--half-jtoasted-exit-btn-size: calc(var(--jtoasted-exit-btn-size) / 2);\r\n\tposition: fixed;\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n\tgap: 5px;\r\n}\r\n\r\n.jtoasteds-container.bottom-right {\r\n\tright: var(--half-jtoasted-exit-btn-size);\r\n\tbottom: 10px;\r\n}\r\n.jtoasteds-container.bottom-left {\r\n\tleft: var(--half-jtoasted-exit-btn-size);\r\n\tbottom: 10px;\r\n}\r\n.jtoasteds-container.top-right {\r\n\tright: var(--half-jtoasted-exit-btn-size);\r\n\ttop: 10px;\r\n}\r\n.jtoasteds-container.top-left {\r\n\tleft: var(--half-jtoasted-exit-btn-size);\r\n\ttop: 10px;\r\n}\r\n.jtoasteds-container.reversed {\r\n\tflex-direction: column-reverse;\r\n}\r\n\r\n.jtoasted {\r\n\tposition: relative;\r\n\tbackground-color: azure;\r\n\tborder: 1px slategray solid;\r\n\tborder-radius: 5px;\r\n\tpadding: 5px;\r\n\tmin-width: 100px;\r\n\tmin-height: 1.5em;\r\n\tmax-width: 25vw;\r\n\twidth: fit-content;\r\n\tmargin-left: auto;\r\n\tmargin-right: 0%;\r\n\r\n\tuser-select: none;\r\n\t-webkit-user-select: none;\r\n}\r\n.jtoasted .jtoasted-exit-btn {\r\n\tposition: absolute;\r\n\ttext-align: center;\r\n\ttop: calc(var(--half-jtoasted-exit-btn-size) * -0.5);\r\n\tright: calc(var(--half-jtoasted-exit-btn-size) * -0.5);\r\n\twidth: var(--jtoasted-exit-btn-size);\r\n\theight: var(--jtoasted-exit-btn-size);\r\n\tbackground-color: rgba(175, 255, 243, 0.1);\r\n\tborder: none;\r\n\tcursor: pointer;\r\n\tcolor: red;\r\n}\r\n.jtoasted .jtoasted-data * {\r\n\tmargin: 0%;\r\n}\r\n"],sourceRoot:""}]);const a=o},"./node_modules/css-loader/dist/runtime/api.js":t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var s="",n=void 0!==e[5];return e[4]&&(s+="@supports (".concat(e[4],") {")),e[2]&&(s+="@media ".concat(e[2]," {")),n&&(s+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),s+=t(e),n&&(s+="}"),e[2]&&(s+="}"),e[4]&&(s+="}"),s})).join("")},e.i=function(t,s,n,r,i){"string"==typeof t&&(t=[[null,t,void 0]]);var o={};if(n)for(var a=0;a<this.length;a++){var d=this[a][0];null!=d&&(o[d]=!0)}for(var l=0;l<t.length;l++){var c=[].concat(t[l]);n&&o[c[0]]||(void 0!==i&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=i),s&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=s):c[2]=s),r&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=r):c[4]="".concat(r)),e.push(c))}},e}},"./node_modules/css-loader/dist/runtime/sourceMaps.js":t=>{t.exports=function(t){var e=t[1],s=t[3];if(!s)return e;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(s)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),i="/*# ".concat(r," */"),o=s.sources.map((function(t){return"/*# sourceURL=".concat(s.sourceRoot||"").concat(t," */")}));return[e].concat(o).concat([i]).join("\n")}return[e].join("\n")}},"./src/style.css":(t,e,s)=>{s.r(e),s.d(e,{default:()=>m});var n=s("./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js"),r=s.n(n),i=s("./node_modules/style-loader/dist/runtime/styleDomAPI.js"),o=s.n(i),a=s("./node_modules/style-loader/dist/runtime/insertBySelector.js"),d=s.n(a),l=s("./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js"),c=s.n(l),u=s("./node_modules/style-loader/dist/runtime/insertStyleElement.js"),p=s.n(u),A=s("./node_modules/style-loader/dist/runtime/styleTagTransform.js"),_=s.n(A),h=s("./node_modules/css-loader/dist/cjs.js!./src/style.css"),f={};f.styleTagTransform=_(),f.setAttributes=c(),f.insert=d().bind(null,"head"),f.domAPI=o(),f.insertStyleElement=p(),r()(h.default,f);const m=h.default&&h.default.locals?h.default.locals:void 0},"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":t=>{var e=[];function s(t){for(var s=-1,n=0;n<e.length;n++)if(e[n].identifier===t){s=n;break}return s}function n(t,n){for(var i={},o=[],a=0;a<t.length;a++){var d=t[a],l=n.base?d[0]+n.base:d[0],c=i[l]||0,u="".concat(l," ").concat(c);i[l]=c+1;var p=s(u),A={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==p)e[p].references++,e[p].updater(A);else{var _=r(A,n);n.byIndex=a,e.splice(a,0,{identifier:u,updater:_,references:1})}o.push(u)}return o}function r(t,e){var s=e.domAPI(e);return s.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;s.update(t=e)}else s.remove()}}t.exports=function(t,r){var i=n(t=t||[],r=r||{});return function(t){t=t||[];for(var o=0;o<i.length;o++){var a=s(i[o]);e[a].references--}for(var d=n(t,r),l=0;l<i.length;l++){var c=s(i[l]);0===e[c].references&&(e[c].updater(),e.splice(c,1))}i=d}}},"./node_modules/style-loader/dist/runtime/insertBySelector.js":t=>{var e={};t.exports=function(t,s){var n=function(t){if(void 0===e[t]){var s=document.querySelector(t);if(window.HTMLIFrameElement&&s instanceof window.HTMLIFrameElement)try{s=s.contentDocument.head}catch(t){s=null}e[t]=s}return e[t]}(t);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(s)}},"./node_modules/style-loader/dist/runtime/insertStyleElement.js":t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},"./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":(t,e,s)=>{t.exports=function(t){var e=s.nc;e&&t.setAttribute("nonce",e)}},"./node_modules/style-loader/dist/runtime/styleDomAPI.js":t=>{t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(s){!function(t,e,s){var n="";s.supports&&(n+="@supports (".concat(s.supports,") {")),s.media&&(n+="@media ".concat(s.media," {"));var r=void 0!==s.layer;r&&(n+="@layer".concat(s.layer.length>0?" ".concat(s.layer):""," {")),n+=s.css,r&&(n+="}"),s.media&&(n+="}"),s.supports&&(n+="}");var i=s.sourceMap;i&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(n,t,e.options)}(e,t,s)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},"./node_modules/style-loader/dist/runtime/styleTagTransform.js":t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}},"./src/index.ts":(t,e,s)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.JToastyToaster=e.TOASTY_POSITION=void 0;const n=s("./src/jtoasty.ts");var r;s("./src/style.css"),function(t){t[t.BOTTOM_RIGHT=0]="BOTTOM_RIGHT",t[t.BOTTOM_LEFT=1]="BOTTOM_LEFT",t[t.TOP_LEFT=2]="TOP_LEFT",t[t.TOP_RIGHT=3]="TOP_RIGHT"}(r=e.TOASTY_POSITION||(e.TOASTY_POSITION={}));class i extends EventTarget{constructor(t,e){super();let s=document.body,n=r.BOTTOM_RIGHT;if("object"==typeof t?(s=t,"number"==typeof e&&(n=e)):"number"==typeof t&&(n=t,"object"==typeof e&&(s=e)),!(s instanceof HTMLElement))throw new TypeError("Passed parent must be an HTMLElement instance");this.parent=s,this.toasted_div=document.createElement("div"),this.toasted_div.classList.add("jtoasteds-container");const i={sidesTo:n,changeTo:t=>{this.positioning.sidesTo=t,this.toasted_div.classList.remove(this.positioning.cssClass),this.cssSideToClass()},cssClass:"bottom-right"};switch(n){case r.BOTTOM_LEFT:i.cssClass="bottom-left";break;case r.TOP_LEFT:this.toasted_div.classList.add("top-left");break;case r.TOP_RIGHT:this.toasted_div.classList.add("top-right");break;default:i.sidesTo=r.BOTTOM_RIGHT,this.toasted_div.classList.add("bottom-right")}this.positioning=i,this.cssSideToClass(),this.parent.appendChild(this.toasted_div)}cssSideToClass(){switch(this.positioning.sidesTo){case r.BOTTOM_LEFT:this.positioning.cssClass="bottom-left";break;case r.TOP_LEFT:this.positioning.cssClass="top-left";break;case r.TOP_RIGHT:this.positioning.cssClass="top-right";break;case r.BOTTOM_RIGHT:this.positioning.cssClass="bottom-right";break;default:return}this.toasted_div.classList.add(this.positioning.cssClass)}sideTo(t){t<0||t>3||this.positioning.changeTo(t)}createNotification(t,...e){let s=5;"string"==typeof t?e.unshift(t):Number.isSafeInteger(t)&&(s=t);const r=new n.JToasty(this.toasted_div,s,...e);return r.on("metadata-set",(t=>{this.dispatchEvent(new CustomEvent("jtoasty.metadata-set",{detail:{data:t.detail,toasty:r}}))})),r}notification(t,e,...s){return t instanceof n.JToasty?("number"==typeof e?(t.set_texts(s),t.set_lifetime(e)):"string"==typeof e&&s.unshift(e),t.set_texts(s),t):"number"==typeof t?("string"==typeof e&&s.unshift(e),this.createNotification(t,...s)):("string"==typeof t&&s.unshift(t),"string"==typeof e&&s.unshift(e),this.createNotification(...s))}progressNotification(t,e,s){if(t instanceof n.JToastyProgess){const n=e;if("string"==typeof s){const e=t.get_texts();1==e.length?e.unshift(s):e[0]=s,t.set_texts(e)}return"number"==typeof n.progress&&t.set_progress(n.progress),"number"==typeof n.finishat&&t.finish_at(n.finishat),"boolean"==typeof n.apercent&&t.use_percentage(n.apercent),t}const r=Object.assign({finishat:100,lifetime:5,progress:0,apercent:!1,prefixing:e},t);return new n.JToastyProgess(this.toasted_div,r)}}e.JToastyToaster=i},"./src/jtoasty.ts":(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.ValueUpdatedEvent=e.JToastyMetadataSetEvent=e.JToastySimpleEvent=e.JToastyEvent=e.JToastyProgess=e.JToasty=void 0;class s extends EventTarget{constructor(t,e,...s){super(),this.meta_data=new Map,this._create_base_html(t),this.set_texts(s),t.appendChild(this.base_div),this.set_lifetime(e)}_create_base_html(t){this._create_base_div(t),this._create_exit_button(),this._create_text_div()}_create_base_div(t){const e=document.createElement("div");e.classList.add("jtoasted"),this.base_div=e,t.appendChild(e)}_create_text_div(){const t=document.createElement("div");t.classList.add("jtoasted-data"),this.base_div.appendChild(t),this.text_div=t}_create_exit_button(){const t=document.createElement("button");t.classList.add("jtoasted-exit-btn");const e=this.base_div;t.addEventListener("click",(()=>{const t=new CustomEvent("user-remove",{cancelable:!0,detail:{toasty:this}});this.dispatchEvent(t)&&e.remove()})),t.innerHTML="&cross;",e.appendChild(t),this.exit_btn=t}_create_data_line_p(t){const e=document.createElement("p");e.classList.add("jtoasted-data"),e.textContent=t,this.text_div.appendChild(e)}set_lifetime(t){null!=this.life_timeout_id&&(clearTimeout(this.life_timeout_id),this.life_timeout_id=null),this.life=t,-1!=t&&(this.life_timeout_id=setTimeout((()=>{this.life_timeout_id=null,this.remove()}),1e3*this.life))}remove(){var t;return!!this.alive&&(this.fireEvent("removing",{cancelable:!0})?(this.set_lifetime(this.life),!1):(null===(t=this.base_div)||void 0===t||t.remove(),this.base_div=null,!0))}get alive(){return null!=this.base_div&&null!=this.base_div.parentElement}set_texts(t){if(this.lines){const e=this.text_div.children,s=Math.min(t.length,e.length);for(let n=0;n<s;n++)e[n].textContent=t[n];if(e.length>s)for(let t=s;t<e.length;t++)e[t].remove();else if(t.length>s)for(let e=s;e<t.length;e++){const s=t[e];this._create_data_line_p(s)}}else for(let e=0;e<t.length;e++){const s=t[e];this._create_data_line_p(s)}this.lines=t.slice()}set_text_at(t,e){if(t<0||t>this.lines.length)return!1;if(t==this.lines.length)return this._create_data_line_p(e),!0;const s=this.text_div.children;return this.lines[t]=e,s[t].textContent=e,!0}get_texts(){return this.lines.slice()}has_metadata(t){return this.meta_data.has(t)}set_metadata(t,e){const s=this.meta_data.get(t);this.meta_data.set(t,e);const n=new o(t,e,s);this.dispatchEvent(n)}get_metadata(t){return this.meta_data.get(t)}on(t,e,s){const n=s||{};this.addEventListener(t,e,n)}once(t,e,s){const n=s?Object.assign({},s,{once:!0}):{once:!0};this.addEventListener(t,e,n)}off(t,e,s){this.removeEventListener(t,e,s)}fireEvent(t,e){const s=e?new CustomEvent(t,e):new CustomEvent(t);return!this.dispatchEvent(s)}}e.JToasty=s;class n extends s{constructor(t,e){const{progress:s,finishat:r,apercent:i,lifetime:o,prefixing:a}=e;"string"==typeof a?super(t,-1,a,""):super(t,-1),this.on("metadata-set",n.PROGRESS_METADATA_LISTENER),this.meta_data.set(n.PROGRESS_METADATA_PROGRESS_KEY,s),this.meta_data.set(n.PROGRESS_METADATA_FINISH_AT_KEY,r),this.set_metadata(n.PROGRESS_METADATA_PERCENT_KEY,i),this._on_completed_callback=()=>{this.set_lifetime(o)},this.once("completed",this._on_completed_callback)}get is_complete(){return this.get_progress()>=this.finish_at()}set_lifetime(t){this.is_complete&&super.set_lifetime(t)}set_progress(t){this.set_metadata(n.PROGRESS_METADATA_PREFIX+"progress",t)}get_progress(){return this.get_metadata(n.PROGRESS_METADATA_PREFIX+"progress")}finish_at(t){const e=n.PROGRESS_METADATA_PREFIX+"finish_at";if("number"!=typeof t)return this.get_metadata(e);this.set_metadata(e,t)}use_percentage(t){if("boolean"!=typeof t)return this.get_metadata(n.PROGRESS_METADATA_PERCENT_KEY);this.set_metadata(n.PROGRESS_METADATA_PERCENT_KEY,t)}on(t,e,s){super.on(t,e,s)}once(t,e,s){super.once(t,e,s)}static get PROGRESS_METADATA_PREFIX(){return"PROGRESS."}static get PROGRESS_METADATA_LISTENER(){const t=n.PROGRESS_METADATA_PREFIX;return e=>{const s=e.detail;if(!e.detail.key.startsWith(n.PROGRESS_METADATA_PREFIX))return;const r=e.target,i=r.get_texts();let o=i.length-1;0==i.length&&(i.length=1,o=0);const d=r.get_metadata(t+"progress"),l=r.get_metadata(t+"finish_at"),c=d>=l?"Completed - ":"Processing - ",u=r.get_metadata(t+"as_percent")?`${(d/l*100).toFixed(2)}%`:`${d} / ${l}`;if(r.set_text_at(o,`${c}${u}`),s.key==n.PROGRESS_METADATA_PERCENT_KEY)return;const p=s.key.substring(n.PROGRESS_METADATA_PREFIX.length),A=new a(p,s.old_value,s.value);r.dispatchEvent(A),d>=l&&r.fireEvent("completed",{detail:{from:p,old_value:s.old_value,new_value:s.value}})}}static get PROGRESS_METADATA_PROGRESS_KEY(){return this.PROGRESS_METADATA_PREFIX+"progress"}static get PROGRESS_METADATA_FINISH_AT_KEY(){return this.PROGRESS_METADATA_PREFIX+"finish_at"}static get PROGRESS_METADATA_PERCENT_KEY(){return this.PROGRESS_METADATA_PREFIX+"as_percent"}}e.JToastyProgess=n;class r extends CustomEvent{constructor(t,e){super(t,e)}}e.JToastyEvent=r;class i extends r{constructor(t,e){super(t,{detail:e})}}e.JToastySimpleEvent=i;class o extends i{constructor(t,e,s){super("metadata-set",{key:t,value:e,old_value:s})}}e.JToastyMetadataSetEvent=o;class a extends i{constructor(t,e,s){super(t+"-updated",{old_value:e,new_value:s,property:t}),this.property=t,this.old_value=e,this.new_value=s}}e.ValueUpdatedEvent=a}},e={};function s(n){var r=e[n];if(void 0!==r)return r.exports;var i=e[n]={id:n,exports:{}};return t[n](i,i.exports,s),i.exports}return s.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return s.d(e,{a:e}),e},s.d=(t,e)=>{for(var n in e)s.o(e,n)&&!s.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},s.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),s.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.nc=void 0,s("./src/index.ts")})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,